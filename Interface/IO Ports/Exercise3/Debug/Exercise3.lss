
Exercise3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000354  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067a  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<avr/io.h>
#include<util/delay.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<PB0) | ~(1<<PB1); //Configure pin 0 and pin 1  in PORTB as input pins.
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8c 93       	st	X, r24
	DDRC |= (1<<PC0) | (1<<PC1);   //Configure pin 0 and pin 1  in PORTC as output pins.
  80:	a4 e3       	ldi	r26, 0x34	; 52
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8c 93       	st	X, r24
	PORTC |= (1<<PC0)|(1<<PC1);  //Set pin 0 and pin 1  in PORTC with value 1 at the beginning (LEDS OFF).
  8e:	a5 e3       	ldi	r26, 0x35	; 53
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e5 e3       	ldi	r30, 0x35	; 53
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8c 93       	st	X, r24

	while(1)
	{
		if(PINB & (1<<PB0))
  9c:	e6 e3       	ldi	r30, 0x36	; 54
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	81 70       	andi	r24, 0x01	; 1
  a8:	90 70       	andi	r25, 0x00	; 0
  aa:	88 23       	and	r24, r24
  ac:	41 f0       	breq	.+16     	; 0xbe <main+0x52>
		{
			PORTC &= ~(1<<PC0);
  ae:	a5 e3       	ldi	r26, 0x35	; 53
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	8c 93       	st	X, r24
  bc:	07 c0       	rjmp	.+14     	; 0xcc <main+0x60>
		}
		else{
			PORTC |= (1<<PC0);
  be:	a5 e3       	ldi	r26, 0x35	; 53
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e5 e3       	ldi	r30, 0x35	; 53
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8c 93       	st	X, r24
		}
		if(PINB & (1<<PB1))
  cc:	e6 e3       	ldi	r30, 0x36	; 54
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	82 70       	andi	r24, 0x02	; 2
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	41 f0       	breq	.+16     	; 0xee <main+0x82>
		{
			PORTC &= ~(1<<PC1);
  de:	a5 e3       	ldi	r26, 0x35	; 53
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	8c 93       	st	X, r24
  ec:	d7 cf       	rjmp	.-82     	; 0x9c <main+0x30>
		}
		else
		{
			PORTC |= (1<<PC1);
  ee:	a5 e3       	ldi	r26, 0x35	; 53
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e3       	ldi	r30, 0x35	; 53
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	8c 93       	st	X, r24
  fc:	cf cf       	rjmp	.-98     	; 0x9c <main+0x30>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
